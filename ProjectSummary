src/utilities:

import React, { useState, Children, cloneElement } from 'react';

// --- Positionable Button Component ---
// This version is modified to use absolute positioning with x and y coordinates.
const Button = ({
  text,
  active = false,
  onClick,
  shape = 'smooth', // 'sharp', 'smooth', 'circle'
  activeColor = 'bg-sky-500',
  hoverColor = 'border-sky-300',
  textColor = 'text-white',
  activeTextColor = 'text-white',
  width = null,
  height = null,
  x = '50%', // New prop for x-coordinate
  y = '50%', // New prop for y-coordinate
  customClasses = ''
}) => {

  // --- STYLE COMPUTATION ---

  // Base classes for styling the button's internal content
  const baseClasses = 'font-semibold focus:outline-none transition-all duration-300 ease-in-out border-2 flex items-center justify-center text-center';

  // --- Shape Classes ---
  let shapeClasses = '';
  let paddingClasses = 'px-5 py-2'; // Default padding

  switch (shape) {
    case 'sharp':
      shapeClasses = 'rounded-none';
      break;
    case 'circle':
      shapeClasses = 'rounded-full';
      paddingClasses = ''; // Padding is handled by size for circles
      break;
    case 'smooth':
    default:
      shapeClasses = 'rounded-lg';
      break;
  }

  // --- State-based Classes ---
  const activeClasses = `${activeColor} ${activeTextColor} border-transparent`;
  const inactiveClasses = `bg-transparent ${textColor} hover:${hoverColor} border-transparent`;

  // Combine all classes, applying default padding only if no size is specified
  const finalClassName = `
    ${baseClasses}
    ${shapeClasses}
    ${!width && !height ? paddingClasses : ''}
    ${active ? activeClasses : inactiveClasses}
    ${customClasses}
  `.replace(/\s+/g, ' ').trim();

  // --- POSITIONING STYLE ---
  // We use the style attribute for absolute positioning and dynamic dimensions.
  const buttonStyle = {
    position: 'absolute',
    top: y,
    left: x,
    width: width,
    height: height,
  };

  // For a circle, ensure width and height are equal for a perfect circle.
  if (shape === 'circle') {
    if (width && !height) buttonStyle.height = width;
    if (height && !width) buttonStyle.width = height;
    if (!width && !height) {
      buttonStyle.width = '96px'; // Default circle size
      buttonStyle.height = '96px';
    }
  }

  return (
    <button
      onClick={onClick}
      className={finalClassName}
      style={buttonStyle}
    >
      {text}
    </button>
  );
};
export default Button;

---

import React, { useState, useEffect, useRef } from 'react';
import Button from './button'; // Assuming your Button component is in the same folder

const DropDown = ({
  options,
  selectedOption,
  onSelect,
  x,
  y,
  width,
  height,
  textColor = 'text-white',

  label, // The text for the label above the dropdown
  label_color = 'text-gray-700', // Default label color
  alignment = 'center', // Default alignment: 'left', 'right', or 'center'
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);

  // --- HELPER VARIABLES FOR ALIGNMENT ---
  // Translate alignment prop to Tailwind CSS classes
  const textAlignClass = {
    left: 'text-left',
    right: 'text-right',
    center: 'text-center',
  }[alignment];

  const justifyContentClass = {
    left: 'justify-start',
    right: 'justify-end',
    center: 'justify-center',
  }[alignment];


  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownRef]);

  const handleSelect = (option) => {
    onSelect(option);
    setIsOpen(false);
  };

  // The container now holds both the label and the dropdown itself
  const containerStyle = {
    position: 'absolute',
    top: y,
    left: x,
    width: width,
    transform: 'translate(-50%, -50%)',
    // Use flexbox to stack the label and dropdown vertically
    display: 'flex',
    flexDirection: 'column',
    gap: '0.5rem', // Adds a small space between the label and the button
  };

  return (
    <div style={containerStyle} ref={dropdownRef}>
      {/* --- LABEL IMPLEMENTATION --- */}
      {/* The label is only rendered if the 'label' prop is provided */}
      {label && (
        <label className={`block text-sm font-medium ${label_color} ${textAlignClass}`}>
          {label}
        </label>
      )}

      {/* The relative container for the button and dropdown list */}
      <div className="relative" style={{ width: '100%', height: height }}>
        <Button
          text={selectedOption}
          onClick={() => setIsOpen(prev => !prev)}
          x="0"
          y="0"
          width="100%"
          height="100%"
          // --- ALIGNMENT FOR BUTTON ---
          // Replaced 'justify-between' with our dynamic alignment class
          customClasses={`px-4 ${justifyContentClass}`}
          active={isOpen}
          textColor={textColor}
        />

        {isOpen && (
          <div className="absolute top-full mt-2 w-full bg-white border border-gray-200 rounded-lg shadow-xl z-10">
            {options.map(option => (
              <div
                key={option}
                onClick={() => handleSelect(option)}
                // Use flexbox to vertically center the text
                style={{ height: height, display: 'flex', alignItems: 'center' }}
                // --- ALIGNMENT FOR LIST ITEMS ---
                // Added our dynamic text alignment class here as well
                className={`px-4 text-gray-700 hover:bg-sky-100 cursor-pointer transition-colors duration-150 ${textAlignClass}`}
              >
                {option}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default DropDown;

---

import React, { useState, Children, cloneElement } from 'react';

// --- Customizable Rectangle Component ---
// This component is now "smart". It manages the active state of its children internally.
//
// Props:
// - defaultActive: The text of the NavItem that should be active by default.
// - onNavigate: (Optional) A function that gets called with the text of the item when it's clicked.
// - ... (all other existing props: width, height, color, etc.)

const Rectangle = ({
  width = '50%',
  height = '50%',
  color = 'bg-red-100',
  center = { x: '50%', y: '50%' },
  shape = 'sharp-rectangle',
  children,
  defaultActive, 
  onNavigate,      
}) => {
  // The state is initialized with the 'defaultActive' prop, or the text of the first child.
  const [activeItem, setActiveItem] = useState(defaultActive || (Children.toArray(children)[0] as React.ReactElement)?.props?.text || '');

  const handleItemClick = (itemName) => {
    setActiveItem(itemName);
    // If the parent component needs to know about the navigation, call the callback.
    if (onNavigate) {
      onNavigate(itemName);
    }
  };

  const barStyle = {
    position: 'absolute',
    '--bar-width': width,
    '--bar-height': height,
    width: 'var(--bar-width)',
    height: 'var(--bar-height)',
    top: `clamp(calc(var(--bar-height) / 2), ${center.y}, calc(100% - var(--bar-height) / 2))`,
    left: `clamp(calc(var(--bar-width) / 2), ${center.x}, calc(100% - var(--bar-width) / 2))`,
    transform: 'translate(-50%, -50%)',
  };

  const shapeClasses = {
    'smooth-rectangle': 'rounded-lg',
    'sharp-rectangle': 'rounded-none',
    'pill': 'rounded-full',
    'circle': 'rounded-full',
  };
  const shapeClass = shapeClasses[shape] || shapeClasses['smooth-rectangle'];

  return (
    <div style={barStyle} className={`${color} ${shapeClass} shadow-lg transition-all duration-300`}>
      <div className="relative w-full h-full">
        {Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return cloneElement(child, {
              active: child.props.text === activeItem,
              onClick: handleItemClick,
            });
          }
          return child;
        })}
      </div>
    </div>
  );
};

export default Rectangle;

---

import React, { useState, useRef } from 'react';

// Icons now accept a 'size' prop to be dynamically sized.
const SearchIcon = ({ size }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} fill="currentColor" viewBox="0 0 16 16">
    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
  </svg>
);

const UploadIcon = ({ size }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} fill="currentColor" viewBox="0 0 16 16">
        <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
        <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z"/>
    </svg>
);


const SelectionBar = ({
  width = '500px',
  height = '60px',
  shape = 'smooth-rectangle', // 'sharp-rectangle' or 'smooth-rectangle'
  x = '50%',
  y = '50%',
  color = 'bg-gray-800',
  scale = 1, // New prop to control the scale of internal elements
}) => {
  const [selectionName, setSelectionName] = useState('No current selection');
  const fileInputRef = useRef(null);

  const handleSearchClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectionName(file.name);
    }
  };
  
  const handleUploadClick = () => {
    console.log('Upload button clicked. No action configured.');
  };

  // --- SIZING CALCULATIONS BASED ON SCALE PROP ---
  // Define base sizes for when scale is 1.
  const baseFontSize = 14;
  const baseIconSize = 16;
  const baseButtonHeight = 40;
  const baseButtonPaddingX = 16;
  const baseGap = 8;
  const baseContainerPadding = 8;

  // Calculate the actual sizes by multiplying the base by the scale prop.
  const fontSize = baseFontSize * scale;
  const iconSize = baseIconSize * scale;
  const buttonHeight = baseButtonHeight * scale;
  const buttonPaddingX = baseButtonPaddingX * scale;
  const gap = baseGap * scale;
  const containerPadding = baseContainerPadding * scale;

  // --- DYNAMIC STYLING ---
  const containerStyle = {
    position: 'absolute',
    top: y,
    left: x,
    width: width,
    height: height,
    transform: 'translate(-50%, -50%)',
    padding: `${containerPadding}px`,
    gap: `${gap}px`,
  };

  const selectionTextStyle = {
    fontSize: `${fontSize}px`,
  };

  const buttonStyle = {
    height: `${buttonHeight}px`,
    paddingLeft: `${buttonPaddingX}px`,
    paddingRight: `${buttonPaddingX}px`,
    fontSize: `${fontSize}px`,
    // Ensure the border-radius scales nicely with the button height
    borderRadius: `${8 * scale}px`, 
  };

  const shapeClass = shape === 'smooth-rectangle' ? 'rounded-xl' : 'rounded-none';

  return (
    <div
      style={containerStyle}
      className={`flex items-center ${color} ${shapeClass} shadow-2xl border border-white/10`}
    >
      <input
        type="file"
        accept=".json"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
      />

      {/* Section 1: Selection Text */}
      <div className="flex-grow px-4">
        <p className="text-gray-300 truncate" style={selectionTextStyle} title={selectionName}>
          {selectionName}
        </p>
      </div>

      {/* Section 2: Action Buttons */}
      <div className="flex items-center" style={{ gap: `${gap}px` }}>
        {/* Search Button */}
        <button
          onClick={handleSearchClick}
          style={buttonStyle}
          className="flex items-center justify-center bg-gray-700/50 hover:bg-gray-600/80 text-white font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
        >
          <SearchIcon size={iconSize} />
          <span style={{ marginLeft: `${gap}px` }}>Search</span>
        </button>

        {/* Upload Button */}
        <button
          onClick={handleUploadClick}
          style={buttonStyle}
          className="flex items-center justify-center bg-blue-600 hover:bg-blue-500 text-white font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
        >
          <UploadIcon size={iconSize} />
          <span style={{ marginLeft: `${gap}px` }}>Upload</span>
        </button>
      </div>
    </div>
  );
};

export default SelectionBar;

---

src/constants:

// src/constants/TABS.ts

export const TABS = [
  {
    label: "Requirement Dev",
    children: [
      {
        label: "Software Development Planning",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development of Concept",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development of SRS",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Requirement V&V",
    children: [
      {
        label: "Software Planning",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Concpet Documentation Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware User Requirement Allocation Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Requirement Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Design Dev",
    children: [
      {
        label: "Development Sofware Architecture",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development Sofware Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Design V&V",
    children: [
      {
        label: "Design Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Implementation Dev",
    children: [
      {
        label: "Source Code Document",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Acceptance Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Component Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Implementation V&V",
    children: [
      {
        label: "Source Code Document",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Qualification Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Acceptance Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Component Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Test Dev",
    children: [
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Acceptance Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Integration Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Test V&V",
    children: [
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Acceptance Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Integration Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Installlation and Checkout Dev",
    children: [
      {
        label: "Installation Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Installation and Checkout",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Installlation and Checkout V&V",
    children: [
      {
        label: "Installation Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Installation and Checkout",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Final Report Generation",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
] as const;

---

src/components/BayesianPage folder:

import Rectangle from "../../utilities/rectangle";

const Background = () => {
  return (
    <>
      <Rectangle
        width="25%"
        height="93.5%"
        color="bg-gray-800"
        center={{ x: '10%', y: '70%' }}
        shape="sharp-rectangle"
      />
      <Rectangle
        width="75%"
        height="93.5%"
        color="bg-gray-200"
        center={{ x: '90%', y: '70%' }}
        shape="sharp-rectangle"
      />
    </>
  );
}
export default Background;

---

import React from 'react';
import Button from "../../utilities/button";
import DropDown from "../../utilities/dropdown";
import { TABS } from "../../constants/tabs"; 

// The component now accepts all the data and functions it needs as props.
const Menu = ({
  activeLabel,
  setActiveLabel,
  dropdownValues,
  handleSelectionChange,
  activeLabelAndDropdowns
}) => {
  const labels = TABS.map(tab => tab.label);
  const labelSeparation = 5;
  const dropdownXSeparation = 17;
  const dropdownYSeparation = 25;

  // All useState hooks and handler functions have been removed.
  // It now relies entirely on the props passed from BayesianPage.

  return (
    <>
      {labels.map((label, index) => (
        <Button
          key={label}
          text={label}
          active={activeLabel === label}
          onClick={() => setActiveLabel(label)}
          x={'2%'}
          y={`${23 + index * labelSeparation}%`}
          width={'20%'}
          height={'5%'}
          shape={'smooth'}
        />
      ))}

      {activeLabelAndDropdowns?.children.map(child => {
        const uniqueKey = `${activeLabelAndDropdowns.label}/${child.label}`;
        return (
          <DropDown
            key={uniqueKey}
            label={child.label}
            label_color="text-gray-800"
            options={child.values}
            selectedOption={dropdownValues[uniqueKey] || child.values[0]}
            onSelect={(value) => handleSelectionChange(uniqueKey, value)}
            x={`${40 + (activeLabelAndDropdowns.children.indexOf(child) % 4) * dropdownXSeparation}%`}
            y={`${25 + Math.floor(activeLabelAndDropdowns.children.indexOf(child) / 4) * dropdownYSeparation}%`}
            width="15%"
            height="15%"
            textColor="text-gray-800"
          />
        );
      })}
    </>
  );
}

export default Menu;

----

src/components/NavigationBar folder:

import NavigationBar from './navigationBar'; 
import NavItem from './navItem';

const Layout = ({ children }) => {
  return (
    <>
        <NavigationBar>

          <NavItem text="Bayesian Methods" position={{ x: '10%', y: '50%' }} />
       
          <NavItem text = "Statistical Methods" position={{ x: '24%', y: '50%' }} />

          <NavItem text = "Reliabiliity Views" position={{ x: '39.5%', y: '50%' }} />

          <NavItem text = "Settings" position={{ x: '95%', y: '50%' }} />

        </NavigationBar>

        {children}
    </>
  );
};

export default Layout;

---

import React, { useState, Children, cloneElement } from 'react';

// --- Customizable Navigation Bar Component ---
// This component is now "smart". It manages the active state of its children internally.
//
// Props:
// - defaultActive: The text of the NavItem that should be active by default.
// - onNavigate: (Optional) A function that gets called with the text of the item when it's clicked.
// - ... (all other existing props: width, height, color, etc.)

const NavigationBar = ({
  width = '100%',
  height = '6.4%',
  color = 'bg-gray-100',
  center = { x: '50%', y: '0%' },
  shape = 'sharp-rectangle',
  children,
  defaultActive, 
  onNavigate,      
}) => {
  // The state is initialized with the 'defaultActive' prop, or the text of the first child.
  const [activeItem, setActiveItem] = useState(defaultActive || (Children.toArray(children)[0] as React.ReactElement)?.props?.text || '');

  const handleItemClick = (itemName) => {
    setActiveItem(itemName);
    // If the parent component needs to know about the navigation, call the callback.
    if (onNavigate) {
      onNavigate(itemName);
    }
  };

  const barStyle = {
    position: 'absolute',
    '--bar-width': width,
    '--bar-height': height,
    width: 'var(--bar-width)',
    height: 'var(--bar-height)',
    top: `clamp(calc(var(--bar-height) / 2), ${center.y}, calc(100% - var(--bar-height) / 2))`,
    left: `clamp(calc(var(--bar-width) / 2), ${center.x}, calc(100% - var(--bar-width) / 2))`,
    transform: 'translate(-50%, -50%)',
  };

  const shapeClasses = {
    'smooth-rectangle': 'rounded-lg',
    'sharp-rectangle': 'rounded-none',
    'pill': 'rounded-full',
    'circle': 'rounded-full',
  };
  const shapeClass = shapeClasses[shape] || shapeClasses['smooth-rectangle'];

  return (
    <div style={barStyle} className={`${color} ${shapeClass} shadow-lg transition-all duration-300`}>
      <div className="relative w-full h-full">
        {Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return cloneElement(child, {
              active: child.props.text === activeItem,
              onClick: handleItemClick,
            });
          }
          return child;
        })}
      </div>
    </div>
  );
};

export default NavigationBar;


---

import React from 'react';

// --- Customizable Navigation Item Component ---
// This component renders a single, clickable text item for the navigation bar.
//
// Props:
// - text: The string to display and use as an identifier.
// - position: An object { x, y } for the item's center coordinates relative to the bar.
// - size: The font size (e.g., 'text-sm', 'text-lg').
// - font: The font family. Options: 'sans', 'serif', 'mono'.
// - active: A boolean to indicate if this is the currently active item.
// - onClick: A function that passes the item's text back to the parent to set the active state.

const NavItem = ({
  text,
  position = { x: '50%', y: '50%' },
  size = 'text-sm',
  font = 'mono',
  color = "text-gray-800", 
  activeColor = "text-red-800",
  hoverColor = "hover:text-blue-400",
  active = false,
  onClick,
}) => {
  // --- Style for Positioning ---
  const itemStyle = {
    position: 'absolute',
    top: position.y,
    left: position.x,
    transform: 'translate(-50%, -50%)',
  };

  // --- Font and Active State Styling ---
  const fontClasses = {
    sans: 'font-sans',   // A clean, modern sans-serif font.
    serif: 'font-serif', // A more traditional serif font.
    mono: 'font-mono',   // A monospaced, techy-style font.
  };

  // Determine the final classes based on props.
  // We add bg-transparent, border-none, and focus:outline-none to reset button styles.
  const finalClasses = `
    cursor-pointer
    transition-colors duration-300
    bg-transparent
    border-none
    p-2 
    focus:outline-none
    ${fontClasses[font] || fontClasses.sans}
    ${size}
    ${active ? `${activeColor} font-bold` : `${color} ${hoverColor}`}
  `;

  return (
    <button 
      type="button" 
      style={itemStyle} 
      className={finalClasses} 
      onClick={() => onClick(text)} 
    >
      {text}
    </button>
  );
};

export default NavItem;

---
src/utilities/bayesian_submit_button/submitButton.logic.ts:

import type { Dispatch, SetStateAction } from 'react';

// This defines the structure of the dropdown data object
export interface DropdownValues {
  [key: string]: string;
}

export type SubmissionState = 'idle' | 'submitting' | 'success' | 'error';

type SetState<T> = Dispatch<SetStateAction<T>>;

// This is the function that formats your data into the correct JSON structure for the API
const formatPayload = (values: DropdownValues) => {
  const payload: { [key: string]: any } = {};

  for (const key in values) {
    const [tabLabel, childLabel] = key.split('/');
    if (!payload[tabLabel]) {
      payload[tabLabel] = {};
    }
    payload[tabLabel][childLabel] = values[key];
  }

  payload['FP'] = { 'FP Input': '120' };
  payload['settings'] = {
    nChains: '4',
    nIter: '10000',
    nBurnin: '2000',
    nThin: '1',
    computeDIC: 'true',
    workingDir: '/app/results',
  };
  return payload;
};

export const handleSubmitLogic = async (
  dropdownValues: DropdownValues,
  setIsLoading: SetState<boolean>,
  setStatusMessage: SetState<string>,
  setSubmissionState: SetState<SubmissionState>
) => {
  setIsLoading(true);
  setStatusMessage('Submitting...');
  setSubmissionState('submitting');

  const API_URL = 'https://a2gxqrwnzi.execute-api.ap-northeast-2.amazonaws.com/dev/start-simulation';
  const payload = formatPayload(dropdownValues);
  const requestBody = { data: JSON.stringify(payload) };

  try {
    // These are the required options for sending JSON data in a POST request
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    const result = await response.json();
    if (!response.ok) throw new Error(result.message || `API Error: ${response.status}`);
    
    setStatusMessage('Success!');
    setSubmissionState('success');

  } catch (error) {
    console.error('Submission failed:', error);
    setStatusMessage('Error!');
    setSubmissionState('error');

  } finally {
    setTimeout(() => {
      setStatusMessage('Submit');
      setIsLoading(false);
      setSubmissionState('idle');
    }, 5000);
  }
};
---
src/utilities/bayesian_submit_button/submitButton.tsx:
import React, { useState } from 'react';
import Button from '../button';
import { handleSubmitLogic } from './submitButton.logic';
import type { DropdownValues, SubmissionState } from './submitButton.logic';

interface SubmitButtonProps {
  dropdownValues: DropdownValues;
  x?: string;
  y?: string;
  width?: string;
  height?: string;
  shape?: 'smooth' | 'sharp' | 'circle';
  before_hover_color?: string;
  hover_color?: string;
  click_color?: string;
}

const SubmitButton: React.FC<SubmitButtonProps> = ({
  dropdownValues,
  before_hover_color = 'bg-red-500',
  hover_color = 'hover:bg-blue-500',
  click_color = 'active:bg-green-500',
  ...buttonProps
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [statusMessage, setStatusMessage] = useState('Submit');
  const [submissionState, setSubmissionState] = useState<SubmissionState>('idle');

  const handleClick = () => {
    handleSubmitLogic(dropdownValues, setIsLoading, setStatusMessage, setSubmissionState);
  };
  
  // Combine the hover and click styles into one string.
  const interactionClasses = `${hover_color} ${click_color} text-white`;

  return (
    <Button
      text={statusMessage}
      onClick={handleClick}
      
      // --- THE WORKAROUND IS HERE ---
      // 1. We force the button into its "active" state. This makes it use
      //    `activeColor` for its background, avoiding the `bg-transparent` issue.
      active={true}
      
      // 2. We pass our desired default color (red) into the `activeColor` prop.
      activeColor={before_hover_color}
      
      // 3. We pass our hover (blue) and click (green) styles as custom classes.
      customClasses={interactionClasses}
      
      {...buttonProps}
    />
  );
};

export default SubmitButton;
---

src/BayesianPage.tsx:

import React, { useState } from 'react';
import Background from "./components/BayesianPage/background";
import Menu from "./components/BayesianPage/menu";
import { TABS } from "./constants/tabs"; 
import SelectionBar from './utilities/searchbar';
import SubmitButton from './utilities/bayesian_submit_button/submitButton'

const initializeState = () => {
  const initialState = {};
  TABS.forEach(tab => {
    tab.children.forEach(child => {
      const key = `${tab.label}/${child.label}`;
      initialState[key] = child.values[0];
    });
  });
  return initialState;
};

function BayesianPage() {

  const [activeLabel, setActiveLabel] = useState('Requirement Dev');
  const [dropdownValues, setDropdownValues] = useState(initializeState());

  const handleSelectionChange = (key, value) => {
    setDropdownValues(prevDropdownValues => ({
      ...prevDropdownValues,
      [key]: value,
    }));
  };

  const activeLabelAndDropdowns = TABS.find(tab => tab.label === activeLabel);

  return (
    <>
      <Background />

      <SelectionBar
        width="25%"
        height="6.4%"
        shape="sharp-rectangle"
        x="12.5%"
        y="9.6%"
        color="bg-gray-800"
        scale={0.7} 
      />

      <Menu
        activeLabel={activeLabel}
        setActiveLabel={setActiveLabel}
        dropdownValues={dropdownValues}
        handleSelectionChange={handleSelectionChange}
        activeLabelAndDropdowns={activeLabelAndDropdowns}
      />

      <SubmitButton
        dropdownValues={dropdownValues}
        x="87%"
        y="90%"
        width="8%"
        height="5%"
        shape="smooth"
        before_hover_color="bg-red-700"
        hover_color="hover:bg-blue-600"
        click_color="active:bg-green-500"
      />

    
    </>
  );
}

export default BayesianPage;


---

src/main.tsx:

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import BayesianPage from './BayesianPage.tsx'
import Layout from './components/NavigationBar/layout.tsx' 

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <Layout>
      <BayesianPage />
    </Layout>
  </StrictMode>,
)

----

src/index.css:

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: hsl(0, 0%, 0%);

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

---

lambda/utils-bayesian folder:

import { APIGatewayProxyEvent } from 'aws-lambda';

interface ParseResult {
  success: boolean;
  data: any | null;
  error: string | null;
}

export function parseRequestBody(event: APIGatewayProxyEvent): ParseResult {
  try {
    if (!event.body) {
      return { success: false, data: null, error: "Request body is empty." };
    }

    // First parse: gets the outer object, e.g., { data: "..." }
    const outerObject = JSON.parse(event.body);

    if (typeof outerObject.data !== 'string') {
      return { success: false, data: null, error: "Request body must contain a 'data' key with a stringified JSON object." };
    }

    // Second parse: gets the actual form data from the inner string
    const innerData = JSON.parse(outerObject.data);
    
    return { success: true, data: innerData, error: null };

  } catch (error) {
    console.error("JSON Parsing Error:", error);
    return { success: false, data: null, error: "Invalid JSON format in request body." };
  }
}

---

// This block contains two files that you would package together in a .zip file for deployment.

// --- /validation/schema.js ---
// This file acts as the single source of truth for our validation rules.
// It's directly derived from your TABS.ts constant.

const TABS = [
  {
    label: "FP",
    children: [{ label: "FP Input", values: [""] }],
  },
  {
    label: "Requirement Dev",
    children: [
      {
        label: "Software Development Planning",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development of Concept",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development of SRS",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Requirement V&V",
    children: [
      {
        label: "Software Planning",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Concpet Documentation Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware User Requirement Allocation Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Requirement Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Design Dev",
    children: [
      {
        label: "Development Sofware Architecture",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development Sofware Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Design V&V",
    children: [
      {
        label: "Design Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Implementation Dev",
    children: [
      {
        label: "Source Code Document",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Acceptance Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Component Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Implementation V&V",
    children: [
      {
        label: "Source Code Document",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Qualification Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Acceptance Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Component Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Test Dev",
    children: [
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Acceptance Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Integration Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Test V&V",
    children: [
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Acceptance Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Integration Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Installlation and Checkout Dev",
    children: [
      {
        label: "Installation Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Installation and Checkout",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Installlation and Checkout V&V",
    children: [
      {
        label: "Installation Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Installation and Checkout",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Final Report Generation",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
] as const;


// To make lookups faster, we transform the array into a Map object.
// The key will be the field label (e.g., "Software Development Planning")
// and the value will be the array of its allowed values (e.g., ["Low", "Medium", "High"]).
const validationSchema = new Map();

TABS.forEach(tab => {
  tab.children.forEach(child => {
    validationSchema.set(child.label, child.values);
  });
});

// We export the schema so our handler can use it.
export { validationSchema };

---

// --- /utils-bayesian/validate.ts ---

import { validationSchema } from './tabs';

// Define a type for the function's return value for clarity
interface ValidationResult {
  isValid: boolean;
  errors: string[];
}

// The formData is expected to be a flat JSON object with string keys and any value type from the form.
export function validateFormData(formData: Record<string, any>): ValidationResult {
  console.log("Received request for validation.");
  const errors: string[] = [];

  // Define the settings fields that should be allowed but not validated against the schema.
  const settingsFields = new Set<string>([
      "nChains", 
      "nIter", 
      "nBurnin", 
      "nThin",
      "autoCloseWinBugs",
      "computeDIC", 
      "workingDir"
  ]);

  if (typeof formData !== 'object' || formData === null) {
    return { isValid: false, errors: ["Request body must be a valid JSON object."] };
  }

  for (const fieldLabel in formData) {
    const submittedValue = formData[fieldLabel];

    // If the current field is a known setting, skip the rest of the validation.
    if (settingsFields.has(fieldLabel)) {
      continue;
    }

    // 1. Check if the submitted field is a known, valid field from the TABS schema.
    if (!validationSchema.has(fieldLabel)) {
      errors.push(`Field '${fieldLabel}' is not a valid field.`);
      continue;
    }

    const allowedValues = validationSchema.get(fieldLabel);

    // 2. Handle the special case for "FP Input".
    if (fieldLabel === "FP Input") {
      if (typeof submittedValue !== 'string' || submittedValue.trim() === '') {
        errors.push("Field 'FP Input' must be a non-empty string.");
      }
      continue;
    }

    // 3. For all other fields, check if the submitted value is in the allowed list.
    // The '!' tells TypeScript that we are sure 'allowedValues' is not undefined here
    // because we already checked with validationSchema.has().
    if (!allowedValues!.includes(submittedValue)) {
      errors.push(`Invalid value for '${fieldLabel}'. Received '${submittedValue}', but expected one of: ${allowedValues!.join(', ')}.`);
    }
  }

  return {
    isValid: errors.length === 0,
    errors: errors,
  };
}

---

lambda/BayesianStarterLambda.ts:

import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';
import { parseRequestBody } from './utils-bayesian/parser';
import { validateFormData } from './utils-bayesian/validate';
import { ECSClient, RunTaskCommand } from "@aws-sdk/client-ecs";
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, PutCommand } from "@aws-sdk/lib-dynamodb";
import { randomUUID } from "crypto";

const ecsClient = new ECSClient({});
const docClient = DynamoDBDocumentClient.from(new DynamoDBClient({}));

const TABLE_NAME = process.env.JOBS_TABLE_NAME;
const CLUSTER_NAME = process.env.CLUSTER_NAME;
const TASK_DEFINITION = process.env.TASK_DEFINITION;
const SUBNET_ID = process.env.SUBNET_ID;
const CONTAINER_NAME = process.env.CONTAINER_NAME;

export const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
  console.log("Received request to start simulation job.");

  if (!TABLE_NAME || !CLUSTER_NAME || !TASK_DEFINITION || !SUBNET_ID || !CONTAINER_NAME) {
    console.error("Missing required environment variables.");
    return {
      statusCode: 500,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: "Internal server error: Service is not configured correctly." }),
    };
  }

  const { success, data: nestedData, error: parsingError } = parseRequestBody(event);

  if (!success || !nestedData) {
    return {
      statusCode: 400,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: parsingError }),
    };
  }

  // --- FLATTEN THE DATA STRUCTURE ---
  // Extract settings and combine with the rest of the form data.
  const { settings, ...tabData } = nestedData;
  const flatFormData: Record<string, any> = { ...settings };

  // The tab data is nested one level deeper, so we need to flatten it.
  for (const key in tabData) {
      Object.assign(flatFormData, tabData[key]);
  }

  const { isValid, errors } = validateFormData(flatFormData);

  if (!isValid) {
    console.error("Validation failed:", errors);
    return {
      statusCode: 400,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: "Invalid form data submitted.", errors }),
    };
  }

  console.log("Validation successful. Proceeding to start Fargate task...");

  try {
    const jobId = randomUUID();
    console.log(`Starting job with ID: ${jobId}`);

    const dbItem = {
      jobId,
      jobStatus: "PENDING",
      formData: flatFormData,
      createdAt: new Date().toISOString(),
    };
    await docClient.send(new PutCommand({ TableName: TABLE_NAME, Item: dbItem }));

    const formDataEnvironmentVariables = Object.entries(flatFormData).map(([key, value]) => ({
      name: key,
      value: String(value),
    }));

    const command = new RunTaskCommand({
      cluster: CLUSTER_NAME,
      taskDefinition: TASK_DEFINITION,
      launchType: "FARGATE",
      networkConfiguration: {
        awsvpcConfiguration: { subnets: [SUBNET_ID], assignPublicIp: "ENABLED" },
      },
      overrides: {
        containerOverrides: [{
          name: CONTAINER_NAME,
          environment: [{ name: "JOB_ID", value: jobId }, ...formDataEnvironmentVariables],
        }],
      },
    });

    await ecsClient.send(command);
    console.log(`Fargate task started successfully for job ${jobId}.`);

    return {
      statusCode: 202,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: "Job accepted for processing.", jobId }),
    };
  } catch (error) {
    console.error("Error activating Fargate task:", error);
    return {
      statusCode: 500,
      headers: { "Access-Control-Allow-Origin": "*" },
      body: JSON.stringify({ message: "Internal server error: Could not start the simulation job." }),
    };
  }
};

---

and other package.json, index.html , various config.json files.
