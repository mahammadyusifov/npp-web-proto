src/constants/Colors.ts

export const COLORS = {
  white: "#FFF",
  gray50: "#F9FAFB",
  gray100: "#F3F4F6",
  gray200: "#E5E7EB",
  gray300: "#D1D5DB",
  gray400: "#9CA3AF",
  gray500: "#6B7280",
  gray600: "#4B5563",
  gray700: "#374151",
  gray800: "#1F2937",
  gray900: "#111827",
  blue50: "#EFF6FF",
  blue600: "#2563EB",
  blue900: "#1E3A8A",
  green600: "#059669",
};

src/constants/FONT_SIZE.ts

export const FONT_SIZE = {
  xs: "12px",
  sm: "14px",
  base: "16px",
  "3xl": "30px",
};


src/constants/tabs.tsx

// src/constants/TABS.ts

export const TABS = [
  {
    label: "Requirement Dev",
    children: [
      {
        label: "Software Development Planning",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development of Concept",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development of SRS",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Requirement V&V",
    children: [
      {
        label: "Software Planning",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Concpet Documentation Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware User Requirement Allocation Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Requirement Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Design Dev",
    children: [
      {
        label: "Development Sofware Architecture",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Development Sofware Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Design V&V",
    children: [
      {
        label: "Design Evaluation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Plan",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Design",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Implementation Dev",
    children: [
      {
        label: "Source Code Document",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Acceptance Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Component Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Implementation V&V",
    children: [
      {
        label: "Source Code Document",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Interface Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Criticality Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Component Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Qualification Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Sofware Acceptance Test Case",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Component Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Software Integration Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Quanlification Test Procedure",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Component Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Test Dev",
    children: [
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Acceptance Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Integration Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Test V&V",
    children: [
      {
        label: "Traceability Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Software Acceptance Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Acceptance Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Integration Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "System Sofware Quanlification Test Execution",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Configuration Management",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Review and Audit",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Installlation and Checkout Dev",
    children: [
      {
        label: "Installation Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Installation and Checkout",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
  {
    label: "Installlation and Checkout V&V",
    children: [
      {
        label: "Installation Procedure Generation",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Installation and Checkout",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Hazard Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Security Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Risk Analysis",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Acitivity Summary Report",
        values: ["Low", "Medium", "High"],
      },
      {
        label: "Final Report Generation",
        values: ["Low", "Medium", "High"],
      },
    ],
  },
] as const;


src/hooks/app-settings.ts

// src/hooks/useAppSettings.ts

import { useState } from 'react';

// 1. Create and export the custom hook function.
export const AppSettings = (): AppSettings => {
  // 2. Move all your useState calls inside this function.
  const [nChains, setnChains] = useState(4);
  const [nIter, setnIter] = useState(10000);
  const [nBurnin, setnBurnin] = useState(2000);
  const [nThin, setnThin] =  useState(1);
  const [computeDIC, setcomputeDIC] = useState(true);
  const [workingDir, setworkingDir] = useState('/app/results');

  // 3. Return all the values and setters in a single object.
  return {
    nChains, nIter, nBurnin, computeDIC, nThin, workingDir,
    setnChains, setnIter, setnBurnin, setcomputeDIC, setnThin, setworkingDir
  };
};

src/NavigationBar/layout.tsx

import NavigationBar from './navigationBar'; 
import NavItem from './navItem';

const Layout = ({ children }) => {
  return (
    <>
        <NavigationBar>

          <NavItem text="Bayesian Methods" position={{ x: '10%', y: '50%' }} />
       
          <NavItem text = "Statistical Methods" position={{ x: '24%', y: '50%' }} />

          <NavItem text = "Reliabiliity Views" position={{ x: '39.5%', y: '50%' }} />

          <NavItem text = "Settings" position={{ x: '95%', y: '50%' }} />

        </NavigationBar>

        {children}
    </>
  );
};

export default Layout;

src/NavigationBar/navigationBar.tsx

import React, { useState, Children, cloneElement } from 'react';

// --- Customizable Navigation Bar Component ---
// This component is now "smart". It manages the active state of its children internally.
//
// Props:
// - defaultActive: The text of the NavItem that should be active by default.
// - onNavigate: (Optional) A function that gets called with the text of the item when it's clicked.
// - ... (all other existing props: width, height, color, etc.)

const NavigationBar = ({
  width = '100%',
  height = '6.4%',
  color = 'bg-gray-100',
  center = { x: '50%', y: '0%' },
  shape = 'sharp-rectangle',
  children,
  defaultActive, 
  onNavigate,      
}) => {
  // The state is initialized with the 'defaultActive' prop, or the text of the first child.
  const [activeItem, setActiveItem] = useState(defaultActive || (Children.toArray(children)[0] as React.ReactElement)?.props?.text || '');

  const handleItemClick = (itemName) => {
    setActiveItem(itemName);
    // If the parent component needs to know about the navigation, call the callback.
    if (onNavigate) {
      onNavigate(itemName);
    }
  };

  const barStyle = {
    position: 'absolute',
    '--bar-width': width,
    '--bar-height': height,
    width: 'var(--bar-width)',
    height: 'var(--bar-height)',
    top: `clamp(calc(var(--bar-height) / 2), ${center.y}, calc(100% - var(--bar-height) / 2))`,
    left: `clamp(calc(var(--bar-width) / 2), ${center.x}, calc(100% - var(--bar-width) / 2))`,
    transform: 'translate(-50%, -50%)',
  };

  const shapeClasses = {
    'smooth-rectangle': 'rounded-lg',
    'sharp-rectangle': 'rounded-none',
    'pill': 'rounded-full',
    'circle': 'rounded-full',
  };
  const shapeClass = shapeClasses[shape] || shapeClasses['smooth-rectangle'];

  return (
    <div style={barStyle} className={`${color} ${shapeClass} shadow-lg transition-all duration-300`}>
      <div className="relative w-full h-full">
        {Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return cloneElement(child, {
              active: child.props.text === activeItem,
              onClick: handleItemClick,
            });
          }
          return child;
        })}
      </div>
    </div>
  );
};

export default NavigationBar;


src/NavigationBar/navItem.tsx

import React from 'react';
import { Link } from 'react-router-dom';

// --- Customizable Navigation Item Component ---
// This component renders a single, clickable text item for the navigation bar.
//
// Props:
// - text: The string to display and use as an identifier.
// - position: An object { x, y } for the item's center coordinates relative to the bar.
// - size: The font size (e.g., 'text-sm', 'text-lg').
// - font: The font family. Options: 'sans', 'serif', 'mono'.
// - active: A boolean to indicate if this is the currently active item.
// - onClick: A function that passes the item's text back to the parent to set the active state.

const NavItem = ({
  text,
  position = { x: '50%', y: '50%' },
  size = 'text-sm',
  font = 'mono',
  color = "text-gray-800", 
  activeColor = "text-red-800",
  hoverColor = "hover:text-blue-400",
  active = false,
  onClick,
}) => {
  // --- Style for Positioning ---
  const itemStyle = {
    position: 'absolute',
    top: position.y,
    left: position.x,
    transform: 'translate(-50%, -50%)',
  };

  // --- Font and Active State Styling ---
  const fontClasses = {
    sans: 'font-sans',   // A clean, modern sans-serif font.
    serif: 'font-serif', // A more traditional serif font.
    mono: 'font-mono',   // A monospaced, techy-style font.
  };

  // Determine the final classes based on props.
  // We add bg-transparent, border-none, and focus:outline-none to reset button styles.
  const finalClasses = `
    cursor-pointer
    transition-colors duration-300
    bg-transparent
    border-none
    p-2 
    focus:outline-none
    ${fontClasses[font] || fontClasses.sans}
    ${size}
    ${active ? `${activeColor} font-bold` : `${color} ${hoverColor}`}
  `;

  const urlPath = text === 'Bayesian Methods' ? '' : text.split(' ')[0].toLowerCase();
  return (
    <Link
      to={urlPath}
      style={itemStyle}
      className={finalClasses}
      onClick={() => onClick(text)} // The onClick still works here to set parent state.
    >
      {text}
    </Link>
  );
};

export default NavItem;


src/utilities/button.tsx

import React, { useState, Children, cloneElement } from 'react';

// --- Positionable Button Component ---
// This version is modified to use absolute positioning with x and y coordinates.
const Button = ({
  text,
  active = false,
  onClick,
  shape = 'smooth', // 'sharp', 'smooth', 'circle'
  activeColor = 'bg-sky-500',
  hoverColor = 'border-sky-300',
  textColor = 'text-white',
  activeTextColor = 'text-white',
  width = null,
  height = null,
  x = '50%', // New prop for x-coordinate
  y = '50%', // New prop for y-coordinate
  customClasses = ''
}) => {

  // --- STYLE COMPUTATION ---

  // Base classes for styling the button's internal content
  const baseClasses = 'font-semibold focus:outline-none transition-all duration-300 ease-in-out border-2 flex items-center justify-center text-center';

  // --- Shape Classes ---
  let shapeClasses = '';
  let paddingClasses = 'px-5 py-2'; // Default padding

  switch (shape) {
    case 'sharp':
      shapeClasses = 'rounded-none';
      break;
    case 'circle':
      shapeClasses = 'rounded-full';
      paddingClasses = ''; // Padding is handled by size for circles
      break;
    case 'smooth':
    default:
      shapeClasses = 'rounded-lg';
      break;
  }

  // --- State-based Classes ---
  const activeClasses = `${activeColor} ${activeTextColor} border-transparent`;
  const inactiveClasses = `bg-transparent ${textColor} hover:${hoverColor} border-transparent`;

  // Combine all classes, applying default padding only if no size is specified
  const finalClassName = `
    ${baseClasses}
    ${shapeClasses}
    ${!width && !height ? paddingClasses : ''}
    ${active ? activeClasses : inactiveClasses}
    ${customClasses}
  `.replace(/\s+/g, ' ').trim();

  // --- POSITIONING STYLE ---
  // We use the style attribute for absolute positioning and dynamic dimensions.
  const buttonStyle = {
    position: 'absolute',
    top: y,
    left: x,
    width: width,
    height: height,
  };

  // For a circle, ensure width and height are equal for a perfect circle.
  if (shape === 'circle') {
    if (width && !height) buttonStyle.height = width;
    if (height && !width) buttonStyle.width = height;
    if (!width && !height) {
      buttonStyle.width = '96px'; // Default circle size
      buttonStyle.height = '96px';
    }
  }

  return (
    <button
      onClick={onClick}
      className={finalClassName}
      style={buttonStyle}
    >
      {text}
    </button>
  );
};
export default Button;

src/utilities/dropdown.tsx

import React, { useState, useEffect, useRef } from 'react';
import Button from './button'; // Assuming your Button component is in the same folder

const DropDown = ({
  options,
  selectedOption,
  onSelect,
  x,
  y,
  width,
  height,
  textColor = 'text-white',

  label, // The text for the label above the dropdown
  label_color = 'text-gray-700', // Default label color
  alignment = 'center', // Default alignment: 'left', 'right', or 'center'
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);

  // --- HELPER VARIABLES FOR ALIGNMENT ---
  // Translate alignment prop to Tailwind CSS classes
  const textAlignClass = {
    left: 'text-left',
    right: 'text-right',
    center: 'text-center',
  }[alignment];

  const justifyContentClass = {
    left: 'justify-start',
    right: 'justify-end',
    center: 'justify-center',
  }[alignment];


  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownRef]);

  const handleSelect = (option) => {
    onSelect(option);
    setIsOpen(false);
  };

  // The container now holds both the label and the dropdown itself
  const containerStyle = {
    position: 'absolute',
    top: y,
    left: x,
    width: width,
    transform: 'translate(-50%, -50%)',
    // Use flexbox to stack the label and dropdown vertically
    display: 'flex',
    flexDirection: 'column',
    gap: '0.5rem', // Adds a small space between the label and the button
  };

  return (
    <div style={containerStyle} ref={dropdownRef}>
      {/* --- LABEL IMPLEMENTATION --- */}
      {/* The label is only rendered if the 'label' prop is provided */}
      {label && (
        <label className={`block text-sm font-medium ${label_color} ${textAlignClass}`}>
          {label}
        </label>
      )}

      {/* The relative container for the button and dropdown list */}
      <div className="relative" style={{ width: '100%', height: height }}>
        <Button
          text={selectedOption}
          onClick={() => setIsOpen(prev => !prev)}
          x="0"
          y="0"
          width="100%"
          height="100%"
          // --- ALIGNMENT FOR BUTTON ---
          // Replaced 'justify-between' with our dynamic alignment class
          customClasses={`px-4 ${justifyContentClass}`}
          active={isOpen}
          textColor={textColor}
        />

        {isOpen && (
          <div className="absolute top-full mt-2 w-full bg-white border border-gray-200 rounded-lg shadow-xl z-10">
            {options.map(option => (
              <div
                key={option}
                onClick={() => handleSelect(option)}
                // Use flexbox to vertically center the text
                style={{ height: height, display: 'flex', alignItems: 'center' }}
                // --- ALIGNMENT FOR LIST ITEMS ---
                // Added our dynamic text alignment class here as well
                className={`px-4 text-gray-700 hover:bg-sky-100 cursor-pointer transition-colors duration-150 ${textAlignClass}`}
              >
                {option}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default DropDown;

utilities/rectangle.tsx

import React, { useState, Children, cloneElement } from 'react';

// --- Customizable Rectangle Component ---
// This component is now "smart". It manages the active state of its children internally.
//
// Props:
// - defaultActive: The text of the NavItem that should be active by default.
// - onNavigate: (Optional) A function that gets called with the text of the item when it's clicked.
// - ... (all other existing props: width, height, color, etc.)

const Rectangle = ({
  width = '50%',
  height = '50%',
  color = 'bg-red-100',
  center = { x: '50%', y: '50%' },
  shape = 'sharp-rectangle',
  children,
  defaultActive, 
  onNavigate,      
}) => {
  // The state is initialized with the 'defaultActive' prop, or the text of the first child.
  const [activeItem, setActiveItem] = useState(defaultActive || (Children.toArray(children)[0] as React.ReactElement)?.props?.text || '');

  const handleItemClick = (itemName) => {
    setActiveItem(itemName);
    // If the parent component needs to know about the navigation, call the callback.
    if (onNavigate) {
      onNavigate(itemName);
    }
  };

  const barStyle = {
    position: 'absolute',
    '--bar-width': width,
    '--bar-height': height,
    width: 'var(--bar-width)',
    height: 'var(--bar-height)',
    top: `clamp(calc(var(--bar-height) / 2), ${center.y}, calc(100% - var(--bar-height) / 2))`,
    left: `clamp(calc(var(--bar-width) / 2), ${center.x}, calc(100% - var(--bar-width) / 2))`,
    transform: 'translate(-50%, -50%)',
  };

  const shapeClasses = {
    'smooth-rectangle': 'rounded-lg',
    'sharp-rectangle': 'rounded-none',
    'pill': 'rounded-full',
    'circle': 'rounded-full',
  };
  const shapeClass = shapeClasses[shape] || shapeClasses['smooth-rectangle'];

  return (
    <div style={barStyle} className={`${color} ${shapeClass} shadow-lg transition-all duration-300`}>
      <div className="relative w-full h-full">
        {Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return cloneElement(child, {
              active: child.props.text === activeItem,
              onClick: handleItemClick,
            });
          }
          return child;
        })}
      </div>
    </div>
  );
};

export default Rectangle;


src/utilities/searchbar.tsx

import React, { useState, useRef } from 'react';

// Icons now accept a 'size' prop to be dynamically sized.
const SearchIcon = ({ size }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} fill="currentColor" viewBox="0 0 16 16">
    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
  </svg>
);

const UploadIcon = ({ size }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} fill="currentColor" viewBox="0 0 16 16">
        <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
        <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z"/>
    </svg>
);


const SelectionBar = ({
  width = '500px',
  height = '60px',
  shape = 'smooth-rectangle', // 'sharp-rectangle' or 'smooth-rectangle'
  x = '50%',
  y = '50%',
  color = 'bg-gray-800',
  scale = 1, // New prop to control the scale of internal elements
}) => {
  const [selectionName, setSelectionName] = useState('No current selection');
  const fileInputRef = useRef(null);

  const handleSearchClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectionName(file.name);
    }
  };
  
  const handleUploadClick = () => {
    console.log('Upload button clicked. No action configured.');
  };

  // --- SIZING CALCULATIONS BASED ON SCALE PROP ---
  // Define base sizes for when scale is 1.
  const baseFontSize = 14;
  const baseIconSize = 16;
  const baseButtonHeight = 40;
  const baseButtonPaddingX = 16;
  const baseGap = 8;
  const baseContainerPadding = 8;

  // Calculate the actual sizes by multiplying the base by the scale prop.
  const fontSize = baseFontSize * scale;
  const iconSize = baseIconSize * scale;
  const buttonHeight = baseButtonHeight * scale;
  const buttonPaddingX = baseButtonPaddingX * scale;
  const gap = baseGap * scale;
  const containerPadding = baseContainerPadding * scale;

  // --- DYNAMIC STYLING ---
  const containerStyle = {
    position: 'absolute',
    top: y,
    left: x,
    width: width,
    height: height,
    transform: 'translate(-50%, -50%)',
    padding: `${containerPadding}px`,
    gap: `${gap}px`,
  };

  const selectionTextStyle = {
    fontSize: `${fontSize}px`,
  };

  const buttonStyle = {
    height: `${buttonHeight}px`,
    paddingLeft: `${buttonPaddingX}px`,
    paddingRight: `${buttonPaddingX}px`,
    fontSize: `${fontSize}px`,
    // Ensure the border-radius scales nicely with the button height
    borderRadius: `${8 * scale}px`, 
  };

  const shapeClass = shape === 'smooth-rectangle' ? 'rounded-xl' : 'rounded-none';

  return (
    <div
      style={containerStyle}
      className={`flex items-center ${color} ${shapeClass} shadow-2xl border border-white/10`}
    >
      <input
        type="file"
        accept=".json"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
      />

      {/* Section 1: Selection Text */}
      <div className="flex-grow px-4">
        <p className="text-gray-300 truncate" style={selectionTextStyle} title={selectionName}>
          {selectionName}
        </p>
      </div>

      {/* Section 2: Action Buttons */}
      <div className="flex items-center" style={{ gap: `${gap}px` }}>
        {/* Search Button */}
        <button
          onClick={handleSearchClick}
          style={buttonStyle}
          className="flex items-center justify-center bg-gray-700/50 hover:bg-gray-600/80 text-white font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
        >
          <SearchIcon size={iconSize} />
          <span style={{ marginLeft: `${gap}px` }}>Search</span>
        </button>

        {/* Upload Button */}
        <button
          onClick={handleUploadClick}
          style={buttonStyle}
          className="flex items-center justify-center bg-blue-600 hover:bg-blue-500 text-white font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
        >
          <UploadIcon size={iconSize} />
          <span style={{ marginLeft: `${gap}px` }}>Upload</span>
        </button>
      </div>
    </div>
  );
};

export default SelectionBar;


src/pages/BayesianPage/background.tsx

import Rectangle from "../../utilities/rectangle";

const Background = () => {
  return (
    <>
      <Rectangle
        width="25%"
        height="93.5%"
        color="bg-gray-800"
        center={{ x: '10%', y: '70%' }}
        shape="sharp-rectangle"
      />
      <Rectangle
        width="75%"
        height="93.5%"
        color="bg-gray-200"
        center={{ x: '90%', y: '70%' }}
        shape="sharp-rectangle"
      />
    </>
  );
}
export default Background;

src/pages/BayesianPage/BayesianPage.tsx

import React, { useState } from 'react';
import Background from './background'
import Menu from './menu'
import { TABS } from '../../constants/tabs';
import SelectionBar from '../../utilities/searchbar';
import SubmitButton from './bayesian_submit_button/submitButton'
import { AppSettings } from '../../hooks/app-settings';

const initializeState = () => {
  const initialState = {};
  TABS.forEach(tab => {
    tab.children.forEach(child => {
      const key = `${tab.label}/${child.label}`;
      initialState[key] = child.values[0];
    });
  });
  return initialState;
};

function BayesianPage({settings}) {

  const [activeLabel, setActiveLabel] = useState('Requirement Dev');
  const [dropdownValues, setDropdownValues] = useState(initializeState());

  const handleSelectionChange = (key, value) => {
    setDropdownValues(prevDropdownValues => ({
      ...prevDropdownValues,
      [key]: value,
    }));
  };

  const activeLabelAndDropdowns = TABS.find(tab => tab.label === activeLabel);

  return (
    <>
      <Background />

      <SelectionBar
        width="25%"
        height="6.4%"
        shape="sharp-rectangle"
        x="12.5%"
        y="9.6%"
        color="bg-gray-800"
        scale={0.7} 
      />

      <Menu
        activeLabel={activeLabel}
        setActiveLabel={setActiveLabel}
        dropdownValues={dropdownValues}
        handleSelectionChange={handleSelectionChange}
        activeLabelAndDropdowns={activeLabelAndDropdowns}
      />

      <SubmitButton
        dropdownValues={dropdownValues}
        settings = {settings}
        x="87%"
        y="90%"
        width="8%"
        height="5%"
        shape="smooth"
        before_hover_color="bg-red-700"
        hover_color="hover:bg-blue-600"
        click_color="active:bg-green-500"
      />

    
    </>
  );
}

export default BayesianPage;


src/pages/BayesianPage/menu.tsx

import React from 'react';
import Button from "../../utilities/button";
import DropDown from "../../utilities/dropdown";
import { TABS } from "../../constants/tabs"; 

// The component now accepts all the data and functions it needs as props.
const Menu = ({
  activeLabel,
  setActiveLabel,
  dropdownValues,
  handleSelectionChange,
  activeLabelAndDropdowns
}) => {
  const labels = TABS.map(tab => tab.label);
  const labelSeparation = 5;
  const dropdownXSeparation = 17;
  const dropdownYSeparation = 25;

  // All useState hooks and handler functions have been removed.
  // It now relies entirely on the props passed from BayesianPage.

  return (
    <>
      {labels.map((label, index) => (
        <Button
          key={label}
          text={label}
          active={activeLabel === label}
          onClick={() => setActiveLabel(label)}
          x={'2%'}
          y={`${23 + index * labelSeparation}%`}
          width={'20%'}
          height={'5%'}
          shape={'smooth'}
        />
      ))}

      {activeLabelAndDropdowns?.children.map(child => {
        const uniqueKey = `${activeLabelAndDropdowns.label}/${child.label}`;
        return (
          <DropDown
            key={uniqueKey}
            label={child.label}
            label_color="text-gray-800"
            options={child.values}
            selectedOption={dropdownValues[uniqueKey] || child.values[0]}
            onSelect={(value) => handleSelectionChange(uniqueKey, value)}
            x={`${40 + (activeLabelAndDropdowns.children.indexOf(child) % 4) * dropdownXSeparation}%`}
            y={`${25 + Math.floor(activeLabelAndDropdowns.children.indexOf(child) / 4) * dropdownYSeparation}%`}
            width="15%"
            height="15%"
            textColor="text-gray-800"
          />
        );
      })}
    </>
  );
}

export default Menu;


src/pages/BayesianPage/bayesian_submit_button/submitButton.logic.ts

import type { Dispatch, SetStateAction } from 'react';

// This defines the structure of the dropdown data object
export interface DropdownValues {
  [key: string]: string;
}

export type SubmissionState = 'idle' | 'submitting' | 'success' | 'error';

type SetState<T> = Dispatch<SetStateAction<T>>;

// This is the function that formats your data into the correct JSON structure for the API
const formatPayload = (values: DropdownValues, settings ) => {
  const payload: { [key: string]: any } = {};

  for (const key in values) {
    const [tabLabel, childLabel] = key.split('/');
    if (!payload[tabLabel]) {
      payload[tabLabel] = {};
    }
    payload[tabLabel][childLabel] = values[key];
  }

  console.log('INPUTTED settings:', settings);
  payload['FP'] = { 'FP Input': '120' };
  payload['settings'] = {
    nChains: String(settings.nChains),
    nIter: String(settings.nIter),
    nBurnin: String(settings.nBurnin),
    nThin: String(settings.nThin),
    computeDIC: String(settings.computeDIC),
    workingDir: settings.workingDir,
  };
  return payload;
};

export const handleSubmitLogic = async (
  dropdownValues: DropdownValues,
  settings,
  setIsLoading: SetState<boolean>,
  setStatusMessage: SetState<string>,
  setSubmissionState: SetState<SubmissionState>
) => {
  setIsLoading(true);
  setStatusMessage('Submitting...');
  setSubmissionState('submitting');

  const API_URL = "https://a2gxqrwnzi.execute-api.ap-northeast-2.amazonaws.com/dev/start-simulation";
  const payload = formatPayload(dropdownValues, settings);
  const requestBody = { data: JSON.stringify(payload) };

  try {
    // These are the required options for sending JSON data in a POST request
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    const result = await response.json();
    if (!response.ok) throw new Error(result.message || `API Error: ${response.status}`);
    
    setStatusMessage('Success!');
    setSubmissionState('success');

  } catch (error) {
    console.error('Submission failed:', error);
    setStatusMessage('Error!');
    setSubmissionState('error');

  } finally {
    setTimeout(() => {
      setStatusMessage('Submit');
      setIsLoading(false);
      setSubmissionState('idle');
    }, 5000);
  }
};

src/pages/BayesianPage/bayesian_submit_button/submitButton.tsx

import React, { useState } from 'react';
import Button from '../../../utilities/button';
import { handleSubmitLogic } from './submitButton.logic';
import type { DropdownValues, SubmissionState } from './submitButton.logic';

interface SubmitButtonProps {
  dropdownValues: DropdownValues;
  x?: string;
  y?: string;
  width?: string;
  height?: string;
  shape?: 'smooth' | 'sharp' | 'circle';
  before_hover_color?: string;
  hover_color?: string;
  click_color?: string;
  settings?: any;
}

const SubmitButton: React.FC<SubmitButtonProps> = ({
  dropdownValues,
  before_hover_color = 'bg-red-500',
  hover_color = 'hover:bg-blue-500',
  click_color = 'active:bg-green-500',
  settings,
  ...buttonProps
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [statusMessage, setStatusMessage] = useState('Submit');
  const [submissionState, setSubmissionState] = useState<SubmissionState>('idle');

  const handleClick = () => {
    handleSubmitLogic(dropdownValues, settings, setIsLoading, setStatusMessage, setSubmissionState);
  };
  
  // Combine the hover and click styles into one string.
  const interactionClasses = `${hover_color} ${click_color} text-white`;

  return (
    <Button
      text={statusMessage}
      onClick={handleClick}
      
      // --- THE WORKAROUND IS HERE ---
      // 1. We force the button into its "active" state. This makes it use
      //    `activeColor` for its background, avoiding the `bg-transparent` issue.
      active={true}
      
      // 2. We pass our desired default color (red) into the `activeColor` prop.
      activeColor={before_hover_color}
      
      // 3. We pass our hover (blue) and click (green) styles as custom classes.
      customClasses={interactionClasses}
      
      {...buttonProps}
    />
  );
};

export default SubmitButton;

src/pages/SettingsPage/SettingsPage.tsx

/** @jsxImportSource @emotion/react */

import { cssObj } from "./style";
import { useState } from "react";
import React from "react";

export default function SettingsPage({
  nChains,
  nIter,
  nBurnin,
  computeDIC,
  nThin,
  setnChains,
  setnIter,
  setnBurnin,
  setcomputeDIC,
  setnThin,
}) {
    
    const UnsavednChains = nChains
    const UnsavednIter = nIter
    const UnsavednBurnin = nBurnin
    const UnsavedcomputeDIC = computeDIC
    const UnsavednThin = nThin

    const [inputValues, setInputValues] = useState({
      UnsavednChains,
      UnsavednIter,
      UnsavednBurnin,
      UnsavedcomputeDIC,
      UnsavednThin,
    });

    
    const handleInputChange = (e, key) => {
      const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;
      setInputValues(prevValues => ({
        ...prevValues, 
        [determineValue(key)]: value
      }));
    }

    const handleSave = () => {
      setnChains(inputValues.UnsavednChains);
      setnIter(inputValues.UnsavednIter);
      setnBurnin(inputValues.UnsavednBurnin);
      setcomputeDIC(inputValues.UnsavedcomputeDIC);
      setnThin(inputValues.UnsavednThin);
      alert('Settings Saved!');
    }
    
    const determineType = (key) => {
      if (key.includes("N")) {return 'number'}
      else if (key.includes('B')) {return 'checkbox'}
      else {return 'text'}
    }

    const determineValue = (key) => {
      if (key === 'N1') return 'UnsavednChains';
      if (key === 'N2') return 'UnsavednIter';
      if (key === 'N3') return 'UnsavednBurnin';
      if (key === 'N4') return 'UnsavednThin';
      if (key === 'B2') return 'UnsavedcomputeDIC';
    }

    const settingsFields = [
        { label: "Number of Chains", key: "N1" },
        { label: "Number of Iterations", key: "N2" },
        { label: "Number of Burns", key: "N3" },
        { label: "Thinning Rate", key: "N4" },
        { label: "Compute DIC, pD and deviance", key: "B2" },
    ];

    return (
      <div css={cssObj.pageWrapper}> 
        
        <main css={cssObj.mainContent}>
            <section
                id="settings-title-section"
                css={[cssObj.container, cssObj.settingsTitleSection]}
            >
                <h1 css={cssObj.title}>BBN Hyperparameters</h1>
            </section>

            <section css={cssObj.settingsGrid}>
              {settingsFields.map(({ label, key, long }) => {
                const valueKey = determineValue(key);
                const inputType = determineType(key);
                return (
                  <div key={key} css={[cssObj.settingBox, long && cssObj.longSettingBox]}>
                    <label htmlFor={key} css={cssObj.inputLabel}>{label}</label>
                    <input
                      type={inputType}
                      id={key}
                      value={inputType === 'checkbox' ? undefined : inputValues[valueKey as keyof typeof inputValues] || ""}
                      checked={inputType === 'checkbox' ? !!inputValues[valueKey as keyof typeof inputValues] : undefined}
                      onChange={(e) => handleInputChange(e, key)}
                      css={cssObj.inputBox}
                    />
                  </div>
                );
              })}
            </section>
        </main>
        
        {/* Save Button */}
        <div css={cssObj.saveButtonContainer}>
            <button 
              css={cssObj.saveButton}
              onClick={handleSave}
            >
              Save
            </button>
        </div>
        {/* Save Button ends here */}
      </div>
    );
}

src/pages/SettingsPage/style.ts

import { css } from "@emotion/react";
// Make sure these paths are correct for your project structure
import { COLORS } from '../../constants/COLORS';
import { FONT_SIZE } from "../../constants/FONT_SIZE";

export const cssObj = {

  pageWrapper: css`
  background-color: ${COLORS.white};
  color: ${COLORS.gray900};
  min-height: 100vh;
  width: 100vw;   /* ensures full width */
  display: flex;
  flex-direction: column;
  padding-top: 80px;
`,


  mainContent: css`
    max-width: 1280px;
    margin: 0 auto;
  `,

  container: css`
    width: 100%;
    margin: 0 auto;
    padding: 0 20px;
  `,

  title: css`
    font-size: ${FONT_SIZE["3xl"]};
    margin-bottom: 2rem;
  `,

  settingsTitleSection: css`
    margin-top: 30px;
  `,

  settingsGrid: css`
    display: grid;
    grid-template-columns: 1fr;
    gap: 24px;
  `,

  settingBox: css`
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  `,

  longSettingBox: css`
    // If you want long boxes to span more columns in a multi-column layout
    // grid-column: span 2; 
  `,

  inputLabel: css`
    font-weight: 500;
    margin-bottom: 8px;
    color: ${COLORS.gray700};
    font-size: ${FONT_SIZE.sm};
  `,

  inputBox: css`
    padding: 8px 12px;
    border-radius: 6px;
    border: 1px solid ${COLORS.gray300};
    width: 100%;
    font-size: ${FONT_SIZE.sm};
    background-color: ${COLORS.white};

    &[type='checkbox'] {
      width: auto;
      height: 20px;
      width: 20px;
    }
  `,

  saveButtonContainer: css`
    position: fixed;
    bottom: 30px;
    right: 30px;
  `,

  saveButton: css`
    padding: 10px 24px;
    background-color: ${COLORS.blue600};
    color: ${COLORS.white};
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: ${FONT_SIZE.base};
    font-weight: 500;
    transition: background-color 0.2s;

    &:hover {
      background-color: ${COLORS.blue700};
    }
  `,
};

src/pages/StatisticalPage/StatisticalPage.tsx

/** @jsxImportSource @emotion/react */
import { useState } from "react";
import axios from "axios";
import { Global } from "@emotion/react";
import { cssObj } from "./style";

export default function StatisticalPage() {
  // 입력값
  const [pfdGoal, setPfdGoal] = useState("");
  const [confidenceGoal, setConfidenceGoal] = useState("");

  // trace 재사용용
  const [traceId, setTraceId] = useState<string | null>(null);

  // 2단계 입력
  const [tests, setTests] = useState<number>(0);
  const [failures, setFailures] = useState<number>(0);

  // 상태/링크
  const [loading, setLoading] = useState<boolean>(false);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);
  const [downloadLink, setDownloadLink] = useState<string | null>(null);

  // 환경변수로 빼두면 배포 시 편합니다.
  //const API_ORIGIN = process.env.NEXT_PUBLIC_API_ORIGIN ?? "http://localhost:8000";
  const API_ORIGIN = "http://localhost:8000";
  const API_BASE = `${API_ORIGIN}/api`;

  // 1) Number of Tests 계산
  const handleSensitivitySubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setErrorMsg(null);
    setLoading(true);
    setDownloadLink(null);
    try {
      const payload: any = {
        pfd_goal: parseFloat(pfdGoal),
        confidence_goal: parseFloat(confidenceGoal),
      };
      if (traceId) payload.trace_id = traceId;

      const res = await axios.post(`${API_BASE}/sensitivity-analysis`, payload);
      const { num_tests } = res.data.data;
      if (res.data.trace_id) setTraceId(res.data.trace_id);
      setTests(Number(num_tests));
    } catch (err) {
      console.error(err);
      setErrorMsg("Sensitivity Analysis 호출 중 오류가 발생했습니다.");
    } finally {
      setLoading(false);
    }
  };

  // 2) Update PFD
  const handlePfdUpdateSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setErrorMsg(null);
    setLoading(true);
    setDownloadLink(null);
    try {
      const payload: any = {
        pfd_goal: parseFloat(pfdGoal),
        demand: tests,
        failures: failures,
      };
      if (traceId) payload.trace_id = traceId;

      const res = await axios.post(`${API_BASE}/update-pfd`, payload);
      if (res.data.trace_id) setTraceId(res.data.trace_id);
      // 출력은 생략
    } catch (err) {
      console.error(err);
      setErrorMsg("Update PFD 호출 중 오류가 발생했습니다.");
    } finally {
      setLoading(false);
    }
  };

  // 3) Full Analysis (저장 & 다운로드 링크 노출)
  const handleFullAnalysisSubmit = async () => {
    setErrorMsg(null);
    setLoading(true);
    setDownloadLink(null);
    try {
      const payload: any = {
        pfd_goal: parseFloat(pfdGoal),
        confidence_goal: parseFloat(confidenceGoal),
        failures: failures,
      };
      if (traceId) payload.trace_id = traceId;

      const res = await axios.post(`${API_BASE}/full-analysis`, payload);
      if (res.data.trace_id) setTraceId(res.data.trace_id);

      // 서버가 준 상대 경로를 절대 URL로 변환
      const dl = res.data.download_url as string | undefined; // 예: /api/download/uuid.json
      if (dl) {
        const absolute = new URL(dl, API_ORIGIN).toString();
        setDownloadLink(absolute);
      }
    } catch (err) {
      console.error(err);
      setErrorMsg("Full Analysis 호출 중 오류가 발생했습니다.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Global styles={cssObj.globalStyles} />
      <div css={cssObj.pageWrapper}>
        <main css={cssObj.mainContent}>
          <section id="settings-title-section" css={[cssObj.container, cssObj.settingsTitleSection]}>
            <h1 css={cssObj.title}>Statistical Methods</h1>
          </section>

          {loading && (
            <div css={cssObj.container} style={{ marginTop: 8 }}><p>처리 중입니다...</p></div>
          )}
          {errorMsg && (
            <div css={cssObj.container} style={{ marginTop: 8, color: "#d33" }}><p>{errorMsg}</p></div>
          )}

          <div css={cssObj.settingsGrid}>
            {/* 1. Sensitivity Analysis */}
            <div css={cssObj.settingBox}>
              <form onSubmit={handleSensitivitySubmit} css={cssObj.formWrapper}>
                <h2>1. Sensitivity Analysis</h2>
                <div css={cssObj.inputGroup}>
                  <label css={cssObj.inputLabel}>PFD Goal</label>
                  <input
                    type="number"
                    step="any"
                    value={pfdGoal}
                    onChange={(e) => setPfdGoal(e.target.value)}
                    placeholder="예: 0.0001"
                    css={cssObj.inputBox}
                    required
                  />
                </div>
                <div css={cssObj.inputGroup}>
                  <label css={cssObj.inputLabel}>Confidence Goal</label>
                  <input
                    type="number"
                    step="any"
                    value={confidenceGoal}
                    onChange={(e) => setConfidenceGoal(e.target.value)}
                    placeholder="예: 0.95"
                    css={cssObj.inputBox}
                    required
                  />
                </div>
                <button type="submit" css={cssObj.saveButton} disabled={loading}>
                  Calculate Number of Tests
                </button>
              </form>
            </div>

            {/* 2. Update PFD */}
            <div css={cssObj.settingBox}>
              <form onSubmit={handlePfdUpdateSubmit} css={cssObj.formWrapper}>
                <h2>2. Update PFD</h2>
                <div css={cssObj.inputGroup}>
                  <label css={cssObj.inputLabel}>Number of Tests</label>
                  <input
                    type="number"
                    value={tests}
                    onChange={(e) => setTests(Number(e.target.value))}
                    css={cssObj.inputBox}
                    min={1}
                    required
                  />
                </div>
                <div css={cssObj.inputGroup}>
                  <label css={cssObj.inputLabel}>Number of Failures</label>
                  <input
                    type="number"
                    value={failures}
                    onChange={(e) => setFailures(Number(e.target.value))}
                    css={cssObj.inputBox}
                    min={0}
                    required
                  />
                </div>
                <button type="submit" css={cssObj.saveButton} disabled={loading}>
                  Update
                </button>
              </form>
            </div>

            {/* 3. Full Analysis */}
            <div css={[cssObj.settingBox, cssObj.longSettingBox]}>
              <h2>3. Full Analysis (Save JSON)</h2>
              <button css={cssObj.saveButton} onClick={handleFullAnalysisSubmit} disabled={loading}>
                Run Full Analysis and Save
              </button>

              {downloadLink && (
                <p css={cssObj.output} style={{ marginTop: 12 }}>
                  저장됨:&nbsp;
                  {/* download 속성 넣지 마세요! 서버의 Content-Disposition 파일명을 사용해야 함 */}
                  <a href={downloadLink} target="_blank" rel="noreferrer">
                    결과 JSON 다운로드
                  </a>
                </p>
              )}
            </div>
          </div>
        </main>
      </div>
    </>
  );
}

src/pages/StatisticalPage/style.ts

import { COLORS } from '../../constants/COLORS'
import { FONT_SIZE } from "../../constants/FONT_SIZE";
import { css } from "@emotion/react";

export const cssObj = {
  globalStyles: css`
    body {
      margin: 0;
      background-color: #f9fafb;
    }
  `,

  pageWrapper: css`
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    background-color: #f9fafb;
  `,
  header: css`
    background-color: ${COLORS.gray800};
    height: 60px;
    flex-shrink: 0;
    & > div {
      display: flex;
      align-items: center;
      height: 100%;
      justify-content: space-between;
    }
    & > div > div {
      display: flex;
      align-items: center;
    }
    & > div img {
      margin-right: 20px;
    }
    & button {
      background: transparent;
      border: none;
      color: ${COLORS.gray300};
      font-size: ${FONT_SIZE.xs};
      height: 60px;
      margin-left: 20px;
      margin-right: 0;
      cursor: pointer;
      transition: color 0.2s;
      &:hover {
        color: ${COLORS.white};
      }
    }
    & button.active,
    & button:focus {
      color: ${COLORS.white};
      outline: none;
    }
  `,
  active: css`
    color: ${COLORS.white} !important;
  `,
  container: css`
    width: 90%;
    max-width: 1600px;
    box-sizing: border-box;
  `,
  mainContent: css`
    flex-grow: 1;
    padding-bottom: 100px;
    display: flex;
    flex-direction: column;
    align-items: center;
  `,
  settingsTitleSection: css`
    margin-top: 80px;
    margin-bottom: 24px;
  `,
  title: css`
    font-size: ${FONT_SIZE["3xl"]};
    color: ${COLORS.gray800};
    font-weight: 700;
  `,
  rightSection: css`
    display: flex;
    align-items: center;
    gap: 20px;
  `,
  newButton: css`
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    background-color: ${COLORS.gray700};
    color: ${COLORS.white};
    border: none;
    font-size: ${FONT_SIZE.sm};
    &:hover {
      background-color: ${COLORS.gray600};
    }
  `,
  settingsGrid: css`
  display: grid;
  grid-template-columns: 2fr 2fr;  
  column-gap: 20%;   /* responsive horizontal gap */
  row-gap: 3%;      /* responsive vertical gap */
  width: 90%;
  margin: 0 auto;
`,

  settingBox: css`
  background-color: ${COLORS.white};
  border: 1px solid ${COLORS.gray200};
  border-radius: 8px;
  padding: 24px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
  gap: 16px;
  min-width: 400px; 
  h2 {
    font-size: ${FONT_SIZE.lg};
    font-weight: 600;
    color: ${COLORS.gray800};
    margin-bottom: 8px;
  }
`,
  longSettingBox: css`
    grid-column: 1 / -1;
  `,
  formWrapper: css`
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 16px;
  `,
  inputGroup: css`
    display: flex;
    flex-direction: column;
    gap: 8px;
  `,
  inputLabel: css`
    font-size: ${FONT_SIZE.sm};
    font-weight: 500;
    color: ${COLORS.gray700};
  `,
  inputBox: css`
    padding: 10px 12px;
    border-radius: 6px;
    border: 1px solid ${COLORS.gray300};
    font-size: ${FONT_SIZE.sm};
    color: ${COLORS.gray800};
    background-color: ${COLORS.white};
    width: 100%;
    box-sizing: border-box;
    transition: border-color 0.2s, box-shadow 0.2s;
    &:focus {
      outline: none;
      border-color: ${COLORS.blue500};
      box-shadow: 0 0 0 1px ${COLORS.blue500};
    }
  `,
  saveButton: css`
    padding: 10px 16px;
    background-color: ${COLORS.blue600};
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: ${FONT_SIZE.sm};
    font-weight: 600;
    align-self: flex-start;
    transition: background-color 0.2s;
    &:hover {
      background-color: ${COLORS.blue700};
    }
  `,
  output: css`
    margin-top: 16px;
    padding: 12px;
    background-color: ${COLORS.gray50};
    border-radius: 6px;
    font-size: ${FONT_SIZE.sm};
    color: ${COLORS.gray700};
    p {
      margin: 0;
    }
    p + p {
      margin-top: 8px;
    }
    a {
      color: ${COLORS.blue600};
      text-decoration: none;
      &:hover {
        text-decoration: underline;
      }
    }
  `,
};

src/App.tsx

import React from 'react';
import { Routes, Route } from 'react-router-dom';

import BayesianPage from './pages/BayesianPage/BayesianPage'; 
import StatisticalPage from "./pages/StatisticalPage/StatisticalPage";
import SettingsPage from "./pages/SettingsPage/SettingsPage";

import { AppSettings } from './hooks/app-settings';

function App() {
  const settingsProps = AppSettings();
  
  return (
    <>
      <Routes>
        <Route path="/" element={<BayesianPage settings = {settingsProps}/>} />
        <Route path="/statistical" element={<StatisticalPage />} />
        <Route path="/settings" element={<SettingsPage {...settingsProps}/>} />
      </Routes>
    </>
  );
}

export default App;

src/index.css

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: hsl(0, 0%, 0%);

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}


src/main.tsx

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'

import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.tsx'

import './index.css'
import Layout from './NavigationBar/layout.tsx' 

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <Layout>
        <App />
      </Layout>
    </BrowserRouter>
  </StrictMode>,
)

src/vite-env.d.ts

/// <reference types="vite/client" />


